・統一インターフェース

リソースに対する最も一般的な4つの操作に対して、HTTPは以下の基本メソッドを提供している。
HTTPメソッド	操作
GET　　　　　　リソースの取得
PUT　　　　　　リソースの更新
POST         リソースの作成
DELETE       リソースの削除
HEAD         リソースのメタデータの取得
OPTIONS      リソースがサポートするメソッドを調べる
　 
リソースの操作をする時に、全てHTTPメソッドが定義通りに使われることを「統一インターフェース」と呼ぶ。
例えば、リソースを取得する場合、/getResourceのようにURI中に操作を表す語彙(get)を使わず、/resourceのようにしてHTTPのGETメソッドを利用する。
そうすることで、一貫した(統一された)インターフェースを保証している。

・GET
クライアントは必要なリソースを取得する場合に、そのURIにGETリクエストを送信してリソースを取得する。
サーバはレスポンスのエンティティボディでリソースを表現し送信する。

・DELETE
クライアントは不要なリソースを削除する場合に、そのURIにDELETEリクエストを送信してリソースを削除する。
DELETEの場合、レスポンスのエンティティボディはステータスメッセージを含んでいるか空である。

・PUT
PUTには以下の2つの役割がある。
1.新規リソースの作成
作成したいリソースの表現をリクエストのエンティティボディに含めてPUTリクエストを送信する。
例えば、以下のURIに対してPUTリクエストを送信すると、以下のURIで新しいリソースが作成される(つまりURIはクライアントが指定する)。
　/weblogs/myblog/entries/1
2.既存リソースの更新
新しいリソースの表現をリクエストのエンティティボディに含めて指定したURIにPUTリクエストを送信することで、指定した既存リソースがリクエストのエンティティボディの内容で上書き(更新)される。

・POST
POSTには以下の3つの役割がある。
1.親リソースに対して子リソースの作成
POSTの代表的な機能。主に掲示板、ブログ記事等の投稿に使われる。親リソースと子リソースというのは、例えばとあるブログリソース(親リソース)を
　/weblogs/myblog
として提供している場合、個々のブログエントリ(子リソース)を、
　/weblogs/myblog/entries/1
として提供することができる。このように、リソース間に親子関係(従属関係)が存在する場合、親リソースに対してPOSTリクエストを送信することで子リソースを作成することができる(ここでは、/weblogs/myblogに対してPOSTリクエストを送信する)。なお、作成されたリソースのURIはサーバ側で決められる。
2.既存リソースへの状態の追加
既存リソースに対して状態を追加する。
例えば、ログというリソースを1つ提供するイベントログサービスがあり、そのURIが/logだとする。
この既存リソースに対して新たな状態を追加する場合、/logに対してPOSTリクエストを送信することで、ログの最後にPOSTしたリソースを追加することができる。
「1.親リソースに対して子リソースの作成」との違いはリソースに親子関係があるかどうかである。
この場合は、/logに対してPOSTリクエストを送信すると、子リソースを新規で作成するのではなく、既存リソースにPOSTした状態を追加している。
3.オーバーロードPOST
他のメソッドでは対応できない処理の実行を行う。
例えば、画面のあるWebアプリケーション等で、フォームの値を送信する、等である。
こういった使い方はROAにおける統一インターフェースから外れるため、クライアントに対して挙動を明示する必要がある。
極力この使い方は避けた方が良い。RESTful WebサービスではオーバーロードPOSTと命名されている。


・POSTとPUTの使い分け
明確な正解はないが、設計上の指針として以下の指針が存在する。
※Webを支える技術 ── HTTP，URI，HTML，そしてRESTより引用
これには正解は存在しませんが、設計上の指針として次の事実があります。
POSTでリソースを作成する場合、クライアントはリソースのURIを指定できません。
URIの決定権はサーバ側にあります。
逆にPUTでリソースを作成する場合、リソースのURIはクライアントが決定します。
（中略） 一般的に、クライアントがリソースのURIを決定できるということは、クライアントを作るプログラマがサーバの内部実装（URIにどの文字を許すのか、長さの制限はどれくらいかなど）を熟知していなければなりません。
そのため、PUTのほうがどうしてもサーバとの結合が密になります。
特別な理由がない限りは、リソースの作成はPOSTで行いURIもサーバ側で決定する、という設計が望ましいでしょう。

・HEADとOPTIONS
HEADはリソースのメタデータを取得する。
例えば、リソースのサイズ、更新日時等がそれにあたる。
HEADメソッドのレスポンスにはボディが含まれない。
リソースの有効性を確認したり、サイズ、更新日時を確認する場合等に利用する。
OPTIONSでは、リソースがサポートしているメソッドを調べることができる。
「Allow: GET, HEAD」という形でレスポンスヘッダーにAllowヘッダーが含まれるので、そこを見ることでサポートされているメソッドを確認することができる。


・安全性とべき等性
HTTPの統一インターフェースを設計通りにサポートすると、2つの有益な特性をただで手に入れることができる。
GETとHEADは、正しく利用すれば安全性を、GET、HEAD、PUT、DELETEはべき等性を手に入れることができる。

・安全性
GET、HEADリクエストは、何らかのデータを読み取るためのリクエストであり、サーバの状態を変更するためのリクエストではない。
そのため、クライアントがGET、HEADリクエストを1回実行するのも10回実行するのも同じことである。
クライアントはGET、HEADリクエストを送信しても害がないことを心強く思える。
ただし、これはGET、HEADリクエストが何の副作用もないということではない。
ほとんどのWebサーバは受信した全てのリクエストをログファイルに記録する。
これらは副作用であり、サーバの状態やリソースの状態がGETリクエストに応じて変化する。
そのため、クライアントは副作用を期待してリクエストを送信してはならないし、副作用が甚大なものであってはならない。

・べき等性
その操作を何度行っても結果が同じであることをいう概念を、べき等性という。
GET、HEAD、PUT、DELETEがその特性を持っている。
例えば、DELETEメソッドを利用して、/resource/100でリソースを削除した後に、再度、/resource/100で削除してもリソースはなくなったままである(削除されたという状態を変更できない)。
PUTでも同様のことが言える。
